x<- read.table('portfolio.value')
x
x[,3]
size(x[,3])
length(x[,3])
f <- seq(1:515, by 2)
f = seq(1:515, by 2)
f = seq(1, 515, by 2)
f = seq(1, 515, by=2)
f
f = seq(1, 513, by=2)
f
for (i in f) {}
y= NULL
for (i in 2:515) {y[i]=x[i]-x[i-1]}
for (i in 2:515) {y[i]=x[,i]-x[,i-1]}
m<-x[,3]
for (i in 2:515) {y[i]=m[i]-m[i-1]}
y
x[>=0]
x[>0]
tf<- x >=0
tf<- (x >=0)
tf<- (x ==0)
tf<- (m >=0)
tf
m
tf<- (y >=0)
y
flatten(y_
)
flatten(y)
unlist(y)
y<-unlist(y)
y
tf<- (y >=0)
tf
which(tf)
514/307
307/514
y
x
m
y
n<- m != 0
n
n<- m[!=0]
which(m !=0)
m
y
which(y !=0)
n = y[which(y!=0)]
n
mean(n)
max(n)
min(n)
which(n == -876)
which(y == -876)
y
for (i in 2:515) {y[i]=x[i]-x[i-1]}portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
for (i in 2:numvals) {valintervals[i]=vals[i]-vals[i-1]}portfoliores<-read.table('portfolio.value')
portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
for (i in 2:numvals) {valintervals[i]=vals[i]-vals[i-1]}
valintervals
for (i in (2:numvals mod 5)) {valintervals[i]=vals[i]-vals[i-1]}
for (i in (2:numvals %% 5)) {valintervals[i]=vals[i]-vals[i-1]}
2:numvals %% 5
for (i in 2:numvals) {if (i %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
valintervals = NULL
for (i in 2:numvals) {if (i %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
for (i in 6:numvals/5) {if ((i-1) %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
valintervals = NULL
for (i in 6:numvals/5) {if ((i-1) %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
valintervals = NULL
for (i in 6:numvals/5) {if ((i-1) %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
for (i in 2:numvals) {if (i %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
ok<-valintervals(which(valintervals != NULL))
which(valintervals!=NULL)
which(valintervals!=Na)
which(valintervals!=NA
which(valintervals!=NA)
which(valintervals!=NA)
which(valintervals>0)
valintervals = NULL
for (i in 2:numvals) {if (i %% 5 == 0) valintervals[i]=vals[i]-vals[i-1]}
valintervals
valintervals = NULL
for (i in 2:numvals) {if (i %% 5 == 0) valintervals[i]=vals[i*5]-vals[5*(i-1)]}
valintervals
valintervals
for (i in 2:numvals) {valintervals[i]=vals[i]-vals[i-1]}
valitnervals
valintervals
vms<-valintervals[seq(1,780,6)]
vms<-valintervals[seq(1,780,5)]
vms
vms<-valintervals[seq(1,length(valintervals),5)]
vms
vms<-valintervals[seq(2,length(valintervals),5)]
vms
mean(vms)
which(vms > 0)
length(which(vms>0))
valintervals#Define simulation parameters
tradefreq <- 5
#Get the relevant data from our recorded portfolio values
portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
for (i in 2:numvals) {valintervals[i]=vals[i]-vals[i-1]}
tradeintervals<-valintervals[seq(2,length(valintervals),tradefreq)]
#Calculate our analysis parameters
avgreturn <- mean(tradeintervals)
#numgoodtrades <- 
#Define simulation parameters
tradefreq <- 5
#Get the relevant data from our recorded portfolio values
portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
for (i in 2:numvals) {valintervals[i]=vals[i]-vals[i-1]}
tradeintervals<-valintervals[seq(2,length(valintervals),tradefreq)]
#Calculate our analysis parameters
avgreturn <- mean(tradeintervals)
#numgoodtrades <- 
avgreturn
vals
valintervals
tradeintervals
#Define simulation parameters
tradefreq <- 5
#Get the relevant data from our recorded portfolio values
portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
for (i in 1:(numvals - 1)) {valintervals[i]=vals[i+1]-vals[i]}
tradeintervals<-valintervals[seq(2,length(valintervals),tradefreq)]
#Calculate our analysis parameters
avgreturn <- mean(tradeintervals)
#numgoodtrades <- 
valintervals
tradeintervals
tradeintervals<-valintervals[seq(1,length(vals),tradefreq)]
tradeintervals
seq(1,length(valintervals),tradefreq)
vals[1]
vals[6]
seq(1,length(valintervals),tradefreq - 1)
for (i in seq(1, numvals - 1, tradefreq)) {valintervals[i]=vals[i+1]-vals[i]}
valintervals
valintervals = NULL
for (i in seq(1, numvals - 1, tradefreq)) {valintervals[i]=vals[i+1]-vals[i]}
valintervals
seq(1, numvals - 1, tradefreq)
vals[1]
vals[6]
for (i in seq(1, numvals - 1, tradefreq)) {i}
for (i in seq(1, numvals - 1, tradefreq)) {print(i)}
for (i in seq(1, numvals - 1, tradefreq)) {valintervals[(i+4)/5]=vals[i+1]-vals[i]}
valintervals
for (i in seq(1, numvals - 1, tradefreq)) {print((i+4)/5)}
for (i in seq(1, numvals - 1, tradefreq)) {valintervals[(i+4)/5]=vals[i+5]-vals[i]}
valintervals
valintervals = NULL
for (i in seq(1, numvals - 1, tradefreq)) {valintervals[(i+4)/5]=vals[i+5]-vals[i]}
valintervals
#Define simulation parameters
tradefreq <- 5
#Get the relevant data from our recorded portfolio values
portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
tradeintervals = NULL
for (i in 1:(numvals - 1)) {valintervals[i]=vals[i+1]-vals[i]}
for (i in seq(1, numvals - 1, tradefreq)) {tradeintervals[(i+4)/5]=vals[i+5]-vals[i]}
#Calculate our analysis parameters
avgreturn <- mean(tradeintervals)
tradeintervals
avgreturn
71*195
which(tradeintervals > 0)
length(which(tradeintervals > 0))
q()
#Define simulation parameters
tradefreq <- 5
#Get the relevant data from our recorded portfolio values
portfoliores<-read.table('portfolio.value')
vals<-portfoliores[,3]
numvals<-length(vals)
valintervals = NULL
tradeintervals = NULL
for (i in 1:(numvals - 1)) {valintervals[i]=vals[i+1]-vals[i]}
for (i in seq(1, numvals - 1, tradefreq)) {tradeintervals[(i+4)/5]=vals[i+5]-vals[i]}
#Calculate our analysis parameters
avgreturn <- mean(tradeintervals)
numgoodtrades <- length(which(tradeintervals > 0))
numbadtrades <- length(which(tradeintervals <= 0))
percentgoodtrades <- (numgoodtrades/(numgoodtrades + numbadtrades))
print(paste("Average return :                         ", avgreturn))
print(paste("Percent of trades that were profitable : ", percentgoodtrades))
tradeintervals
mean(tradeintervals)
which(is.na(tradeintervals)))
which(is.na(tradeintervals))
tradeintervals <- tradeintervals[which(!is.na(tradeintervals))]
tradeintervals
q()
q()
